version: "3.8"

volumes:
  rabbitmq_data: # volume for rabbitmq data, so it doesn't create an anonymous one on each container
  geonetwork:
  esdata:
  pgdata:
  
networks:
  gn-cloud-network:
    driver: bridge
        
services:
  # include the required legacy geonetwork as a service, and its service dependencies for database and elasticsearch
  # Rationale is to lower the barrier for developers to get started with this project, and to have the indexing-service
  # services dependencies in the same network
  geonetwork:
    image: geonetwork:4.0.0-alpha
    restart: always
    ports:
      - 8080:8080
    environment:
      DATA_DIR: /catalogue-data

      JAVA_OPTIONS: >
        -Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
        -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true
        -Xms512M -Xss512M -Xmx2G -XX:+UseConcMarkSweepGC
        -Dgeonetwork.resources.dir=/catalogue-data/resources
        -Dgeonetwork.data.dir=/catalogue-data
        -Dgeonetwork.codeList.dir=/var/lib/jetty/webapps/geonetwork/WEB-INF/data/config/codelist
        -Dgeonetwork.schema.dir=/var/lib/jetty/webapps/geonetwork/WEB-INF/data/config/schema_plugins
      ES_HOST: elasticsearch
      ES_PROTOCOL: http
      ES_PORT: 9200

      KB_URL: http://kibana:5601

      GEONETWORK_DB_TYPE: postgres
      GEONETWORK_DB_HOST: database
      GEONETWORK_DB_PORT: 5432
      GEONETWORK_DB_NAME: geonetwork
      GEONETWORK_DB_USERNAME: geonetwork
      GEONETWORK_DB_PASSWORD: geonetwork
    volumes:
      - geonetwork:/catalogue-data
    depends_on:
      - kibana
      - elasticsearch
      - database
    networks:
      - gn-cloud-network

  elasticsearch:
    image: elasticsearch:7.9.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    environment:
      ES_JAVA_OPTS: "-Xms1G -Xmx1G"
      discovery.type: single-node
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - gn-cloud-network

  kibana:
    image: kibana:7.9.0
    environment:
      SERVER_NAME: 'kibana'
      ELASTICSEARCH_URL: http://elasticsearch:9200/
      SERVER_BASEPATH: /geonetwork/dashboards
      SERVER_REWRITEBASEPATH: 'false'
      KIBANA_INDEX: .dashboards
      XPACK_MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED: 'true'
    networks:
      - gn-cloud-network

  database:
    image: mdillon/postgis
    environment:
      POSTGRES_USER: "${MDDB_DBNAME}"
      POSTGRES_PASSWORD: "${MDDB_USERNAME}"
      POSTGRES_DB: "${MDDB_PASSWORD}"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - gn-cloud-network
    ports:
      # expose for local profile without overlapping with a running default postgres port in the host
      - "55432:5432"

  # Event broker for spring-cloud-bus event messaging
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - gn-cloud-network
    ports:
      - "5672:5672"
      - "15672:15672"

  # Eureka service discovery. This is a Discovery First Bootstrap configuration.
  # The discovery service is the only fixed entry point.
  # Browse to http://localhost:8761 to check all services are registered.
  discovery:
    image: gn-cloud-discovery:${TAG}
    environment:
      SERVER_PORT: 8761
      EUREKA_INSTANCE_HOSTNAME: discovery
    ports:
      - 8761:8761 # for development, so services can be run from localhost and find the discovery service running on docker
    networks:
      - gn-cloud-network
#    healthcheck:
#      test: ["CMD", "curl", "-f", "-m", "1", "http://localhost:8761/actuator/health"]
#      interval: 1s
#      timeout: 1s
#      retries: 15

  # Spring Cloud Config service, provides centralized configuration to all
  # microservices. Being a Discovery First Bootstrap configuration, it'll
  # register itself with the Eureka discovery service and can be scaled
  config:
    image: gn-cloud-configuring:${TAG}
    depends_on:
      - discovery
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      RABBITMQ_HOST: rabbitmq
      CONFIG_PATH: ./config
    networks:
      - gn-cloud-network
    volumes:
      - ./config:/workspace/config
    ports:
      - 9999:8080

  auth:
    image: gn-cloud-authorizing:${TAG}
    depends_on:
      - config
      - rabbitmq
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      RABBITMQ_HOST: rabbitmq
    networks:
      - gn-cloud-network

  search:
    image: gn-cloud-searching:${TAG}
    depends_on:
      - config
      - rabbitmq
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      RABBITMQ_HOST: rabbitmq
    networks:
      - gn-cloud-network

  ogc-records:
    image: gn-ogc-api-records-service:${TAG}
    depends_on:
      - config
      - rabbitmq
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      RABBITMQ_HOST: rabbitmq
    networks:
      - gn-cloud-network
