spring:
  elasticsearch.rest.uris: http://elasticsearch:9200
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://database:5432/geonetwork
    username: geonetwork
    password: geonetwork
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    jpa.generate-ddl: false
    jpa.hibernate.ddl-auto: none
management:
  health.ldap.enabled: false
  metrics:
#    export:
#      elastic:
#        index: gn-metrics
#        step: 10s
#        host: http://localhost:9200
    tags:
      host: localhost
      application: GeoNetwork
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus
camel:
  springboot:
    name: ServicesRest
  component:
    servlet:
      mapping:
        context-path: /api/*
    micrometer:
      metrics-registry:
    kafka:
      brokers: localhost:9092
logging.level.org.fao.geonet.indexing: DEBUG
logging.level.org.springframework.amqp: DEBUG

---
# Use this profile when running from the host instead of inside the docker composition, either
# from the IDE or through mvn spring-boot:run -Dspring-boot.run.profiles=dev,local -f modules/services/indexing/
spring:
  profiles: local
  elasticsearch.rest.uris: http://localhost:9200
  datasource.url: jdbc:postgresql://localhost:55432/geonetwork
server.port: 9997
---
spring:
  profiles: dev
  jpa:
    jpa.generate-ddl: true
    jpa.hibernate.ddl-auto: update
